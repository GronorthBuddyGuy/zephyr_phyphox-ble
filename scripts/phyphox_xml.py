# Copyright 2022, Victor Chavez (chavez-bermudez@fh-aachen.de)
# SPDX-License-Identifier: GPL-3.0-or-later

import argparse
import pathlib
import zlib
import re

#Filter phyphox editor pos, as its only needed for the GUI
EDITOR_POS_REGEX = r"(editor:uuid=[\"^0-9a.^0-9a\"]+|editor:posx=[\"^0-9a.^0-9a\"]+|editor:posy=[\"^0-9a.^0-9a\"]+)"
TAG_WHITESPACE_REGEX = '\s+(?=<)'
FILE_NAME_BASE = "phyphox_autogen"
NAMESPACE = "phyphox_ble::autogen"

parser = argparse.ArgumentParser(description='Convert Phyphox xml to raw C/C++ array')
parser.add_argument('file', type=str,
                    help='XML file path')
parser.add_argument('out',  type=str,
                    help='output dir of autogen file')
args = parser.parse_args()

path_base = pathlib.Path(args.out)

xml_file = open(args.file,"r")
xml_str = xml_file.read()
xml_str = re.sub(EDITOR_POS_REGEX, " ", xml_str, 0, re.MULTILINE)
xml_str = re.sub(TAG_WHITESPACE_REGEX, '', xml_str)
DESCR_START_STRING = "<description>"
descr_start = xml_str.find("<description>") + len(DESCR_START_STRING)
descr_end = xml_str.find("</description>")
description_str = xml_str[descr_start:descr_end]
xml_str = xml_str.replace("\t","").replace("\n","").replace("\r","")
descr_start = xml_str.find("<description>") + len(DESCR_START_STRING)
descr_end = xml_str.find("</description>")
xml_str = xml_str[:descr_start] + description_str + xml_str[descr_end:]
xml_len = len(xml_str)
xml_hex_str = xml_str.encode("utf-8").hex()
xml_c_data_len = int(len(xml_hex_str)/2)
# device id pattern that can be replaced by ble peripheral
start_exp_title = xml_str.find("<title>")+len("<title>")
end_exp_title = xml_str.find("</title>")
ble_in_placeholder = "ble_name_in_placeholder"
start_ble_in_name = xml_str.find(ble_in_placeholder)
if start_ble_in_name != -1:
    end_ble_in_name =start_ble_in_name + len(ble_in_placeholder)
else:
    end_ble_in_name = 0
ble_out_placeholder = "ble_name_out_placeholder"
start_ble_out_name = xml_str.find(ble_out_placeholder)
if start_ble_out_name != -1:
    end_ble_out_name =start_ble_out_name + len(ble_out_placeholder)
else:
    end_ble_out_name = 0
# Described in https://phyphox.org/wiki/index.php/Bluetooth_Low_Energy 
# section - Sending phyphox-files from a device (0002 and 0003)
crc32 = zlib.crc32(xml_str.encode())
crc32 = int(crc32).to_bytes(4, byteorder='big')
PHY_PHOX_MAGIC_HEADER = "phyphox".encode()
phy_phox_header = PHY_PHOX_MAGIC_HEADER+ int(xml_c_data_len).to_bytes(4, byteorder='big') + crc32

hpp_file_str = '/* Autogenerated phy phox xml experiment\n' \
                'Do not modify manually\n*/\n' \
                '#pragma once\n' \
                '#include <cstdint>\n\n' \
                'namespace '+NAMESPACE+'\n{\n' \
                '    uint16_t constexpr EXP_TITLE_START='+str(start_exp_title)+';\n'\
                '    uint16_t constexpr EXP_TITLE_END='+str(end_exp_title)+';\n'\
                '    uint16_t constexpr BLE_START_NAME_IN='+str(start_ble_in_name)+';\n'\
                '    uint16_t constexpr BLE_END_NAME_IN='+str(end_ble_in_name)+';\n'\
                '    uint16_t constexpr BLE_START_NAME_OUT='+str(start_ble_out_name)+';\n'\
                '    uint16_t constexpr BLE_END_NAME_OUT='+str(end_ble_out_name)+';\n'\
                '    uint16_t constexpr EXP_DATA_SIZE='+str(xml_c_data_len)+';\n'\
                '    uint16_t constexpr HEADER_SIZE=15;\n'\
                '    extern uint8_t exp_data[EXP_DATA_SIZE];\n' \
                '    extern uint8_t exp_header[HEADER_SIZE];\n' \
                '} // namespace '+NAMESPACE

cpp_file_str = '/* Autogenerated phy phox xml experiment\n' \
            'Do not modify manually\n*/\n' \
            '#include "'+FILE_NAME_BASE+'.hpp"\n' \
            'namespace '+NAMESPACE+'\n{\n' \
            '    uint8_t exp_header[HEADER_SIZE] = \n'\
            '    {\n '\
            '       '\

for i in range(0,len(phy_phox_header)):
    cpp_file_str += hex(phy_phox_header[i]) + ","    
cpp_file_str = cpp_file_str[:-1] # remove last comma
cpp_file_str += '\n    };\n' 

cpp_file_str+=  '    uint8_t exp_data[EXP_DATA_SIZE]=\n' \
                '    {\n'\
                '        '
                
MAX_ELEM_LINE = 20
for i in range(0,xml_len):
    hex_byte = xml_hex_str[i*2:i*2+2]
    cpp_file_str+="0x"+ hex_byte+","
    if (i+1)%MAX_ELEM_LINE == 0:
        cpp_file_str+='\n        '
cpp_file_str = cpp_file_str[:-1] # remove last comma

cpp_file_str += '\n        };\n' \
            '} // namespace '+NAMESPACE


cpp_file_path = pathlib.Path.joinpath(path_base,FILE_NAME_BASE+".cpp")
hpp_file_path = pathlib.Path.joinpath(path_base,FILE_NAME_BASE+".hpp")
cpp_file = open(cpp_file_path,"w")
cpp_file.write(cpp_file_str)

hpp_file = open(hpp_file_path,"w")
hpp_file.write(hpp_file_str)
